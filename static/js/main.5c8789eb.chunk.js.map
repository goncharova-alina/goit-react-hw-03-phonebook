{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js"],"names":["INITIAL_STATE","name","number","ContactForm","state","handleChangeForm","target","value","setState","handleSubmitForm","e","preventDefault","onAdd","props","validateForm","id","uuid","resetForm","onCheckUnique","alert","this","onSubmit","type","placeholder","onChange","className","Component","ContactListItem","onRemove","onClick","ContactList","contacts","length","map","contact","Filter","filter","defaultProps","App","handleAddContact","newContact","prevState","handleCheckUniqueContact","isExistContact","find","handleRemoveContact","handleChangeFilter","getVisibleContacts","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","console","log","nowContacts","setItem","stringify","visibleContacts","title","ReactDOM","render","document","querySelector"],"mappings":"kWAKMA,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAmFKC,E,4MA/EbC,MAAQJ,E,EAERK,iBAAmB,YAAiB,IAAdC,EAAa,EAAbA,OACZL,EAAgBK,EAAhBL,KAAMM,EAAUD,EAAVC,MACd,EAAKC,SAAL,eAAiBP,EAAOM,K,EAG1BE,iBAAmB,SAACC,GAClBA,EAAEC,iBADsB,MAGC,EAAKP,MAAtBH,EAHgB,EAGhBA,KAAMC,EAHU,EAGVA,OACNU,EAAU,EAAKC,MAAfD,MAEgB,EAAKE,iBAG7BF,EAAM,CAAEG,GAAIC,cAAQf,OAAMC,WAE1B,EAAKe,c,EAGPH,aAAe,WAAO,IAAD,EACM,EAAKV,MAAtBH,EADW,EACXA,KAAMC,EADK,EACLA,OACNgB,EAAkB,EAAKL,MAAvBK,cACR,OAAahB,EAINgB,EAAcjB,IAHnBkB,MAAM,wBACC,I,EAKXF,UAAY,kBAAM,EAAKT,SAASR,I,4CAEhC,WAAU,IAAD,EACkBoB,KAAKhB,MAAtBH,EADD,EACCA,KAAMC,EADP,EACOA,OAEd,OACE,uBAAMmB,SAAUD,KAAKX,iBAArB,UACE,sCACA,gCACE,uBACEa,KAAK,OACLrB,KAAK,OACLsB,YAAY,aACZhB,MAAON,EACPuB,SAAUJ,KAAKf,qBAGnB,uBACA,wCACA,gCACE,uBACEiB,KAAK,MACLrB,KAAK,SACLsB,YAAY,qBACZhB,MAAOL,EACPsB,SAAUJ,KAAKf,qBAGnB,uBACA,wBAAQiB,KAAK,SAASG,UAAU,aAAhC,gC,GA7DkBC,a,OCJpBC,G,MAAkB,SAAC,GAAoC,IAAlCZ,EAAiC,EAAjCA,GAAId,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQ0B,EAAe,EAAfA,SAC3C,OACE,qBAAIH,UAAU,kBAAd,UACGxB,EADH,KACWC,EACT,wBACEoB,KAAK,SACLG,UAAU,sBACVI,QAAS,kBAAMD,EAASb,IAH1B,yBAuCSe,EA5BK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUH,EAAe,EAAfA,SAC/B,OAAwB,IAApBG,EAASC,OAAqB,KAEhC,oBAAIP,UAAU,eAAd,SACGM,EAASE,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,2BAAqBA,GAArB,IAA8BN,SAAUA,WCtB1CO,G,MAAS,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQZ,EAAe,EAAfA,SACxB,OACE,sBAAKC,UAAU,SAAf,UACE,sDACA,uBACEH,KAAK,OACLrB,KAAK,SACLM,MAAO6B,EACPZ,SAAU,gBAAGlB,EAAH,EAAGA,OAAH,OAAgBkB,EAASlB,EAAOC,QAC1CgB,YAAY,+BAMpBY,EAAOE,aAAe,CACpB9B,MAAO,IAQM4B,QC6DAG,G,kNAlFblC,MAAQ,CACN2B,SAAU,CACR,CAAEhB,GAAI,OAAQd,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEa,GAAI,OAAQd,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEa,GAAI,OAAQd,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEa,GAAI,OAAQd,KAAM,iBAAkBC,OAAQ,cAEhDkC,OAAQ,I,EAkBVG,iBAAmB,SAACC,GAClB,EAAKhC,UAAS,SAACiC,GACb,MAAO,CACLV,SAAS,GAAD,mBAAMU,EAAUV,UAAhB,CAA0BS,S,EAKxCE,yBAA2B,SAACzC,GAAU,IAE9B0C,IADe,EAAKvC,MAAlB2B,SAC0Ba,MAAK,SAACV,GAAD,OAAaA,EAAQjC,OAASA,KAErE,OADA0C,GAAkBxB,MAAM,GAAD,OAAIwB,EAAe1C,KAAnB,8BACf0C,G,EAGVE,oBAAsB,SAAC9B,GAAD,OACpB,EAAKP,UAAS,kBAAmB,CAC/BuB,SADY,EAAGA,SACIK,QAAO,SAACF,GAAD,OAAaA,EAAQnB,KAAOA,U,EAG1D+B,mBAAqB,SAACV,GAAD,OAAY,EAAK5B,SAAS,CAAE4B,Y,EAEjDW,mBAAqB,WAAO,IAAD,EACI,EAAK3C,MAA1B2B,EADiB,EACjBA,SAAUK,EADO,EACPA,OAClB,OAAOL,EAASK,QAAO,SAACF,GAAD,OACrBA,EAAQjC,KAAK+C,cAAcC,SAASb,EAAOY,mB,uDAxC/C,WACE,IAAMjB,EAAWmB,aAAaC,QAAQ,YAChCC,EAAiBC,KAAKC,MAAMvB,GAClCwB,QAAQC,IAAIJ,GACRA,GAAgBhC,KAAKZ,SAAS,CAAEuB,SAAUqB,M,gCAGhD,SAAmBX,GAAY,IACXgB,EAAgBrC,KAAKhB,MAA/B2B,SAEJ0B,IAD+BhB,EAA3BV,UAENmB,aAAaQ,QAAQ,WAAYL,KAAKM,UAAUF,M,oBAiCpD,WAAU,IAAD,EACsBrC,KAAKhB,MAA1B2B,EADD,EACCA,SAAUK,EADX,EACWA,OACZwB,EAAkBxC,KAAK2B,qBAC7B,OACE,mCACE,sBAAKtB,UAAU,YAAf,UACE,0BAASoC,MAAM,YAAYpC,UAAU,UAArC,UACE,2CACA,cAAC,EAAD,CACEM,SAAUA,EACVnB,MAAOQ,KAAKmB,iBACZrB,cAAeE,KAAKsB,8BAGxB,0BAASmB,MAAM,WAAWpC,UAAU,UAApC,UACE,0CACA,cAAC,EAAD,CAAQW,OAAQA,EAAQZ,SAAUJ,KAAK0B,qBACvC,cAAC,EAAD,CACEf,SAAU6B,EACVhC,SAAUR,KAAKyB,kC,GA1EXnB,cCAlBoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.5c8789eb.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./ContactForm.css\";\r\n\r\nconst INITIAL_STATE = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = INITIAL_STATE;\r\n\r\n  handleChangeForm = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n\r\n    const isValidatedForm = this.validateForm();\r\n\r\n    if (!isValidatedForm) return;\r\n    onAdd({ id: uuid(), name, number });\r\n\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { onCheckUnique } = this.props;\r\n    if ((!name, !number)) {\r\n      alert(\"Some filed is empty\");\r\n      return false;\r\n    }\r\n    return onCheckUnique(name);\r\n  };\r\n\r\n  resetForm = () => this.setState(INITIAL_STATE);\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmitForm}>\r\n        <h3>Name</h3>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter name\"\r\n            value={name}\r\n            onChange={this.handleChangeForm}\r\n          />\r\n        </label>\r\n        <br />\r\n        <h3>Number</h3>\r\n        <label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"Enter phone number\"\r\n            value={number}\r\n            onChange={this.handleChangeForm}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\" className=\"buttonForm\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onAddContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className=\"ContactListItem\">\r\n      {name}: {number}\r\n      <button\r\n        type=\"button\"\r\n        className=\"ContactsList-button\"\r\n        onClick={() => onRemove(id)}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <ul className=\"ContactsList\">\r\n      {contacts.map((contact) => (\r\n        <ContactListItem {...contact} onRemove={onRemove} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClickRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nContactList.propTypes = {\r\n  filteredContacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <div className=\"Filter\">\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={({ target }) => onChange(target.value)}\r\n        placeholder=\"Enter name for Search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.defaultProps = {\r\n  value: \"\",\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport ContactList from \"./ContactList\";\r\nimport Filter from \"./Filter\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    ],\r\n    filter: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const contacts = localStorage.getItem(\"contacts\");\r\n    const parsedContacts = JSON.parse(contacts);\r\n    console.log(parsedContacts);\r\n    if (parsedContacts) this.setState({ contacts: parsedContacts });\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    const { contacts: nowContacts } = this.state;\r\n    const { contacts: prevContacts } = prevState;\r\n    if (nowContacts !== prevContacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(nowContacts));\r\n    }\r\n  }\r\n\r\n  handleAddContact = (newContact) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: [...prevState.contacts, newContact],\r\n      };\r\n    });\r\n  };\r\n\r\n  handleCheckUniqueContact = (name) => {\r\n    const { contacts } = this.state;\r\n    const isExistContact = !!contacts.find((contact) => contact.name === name);\r\n    isExistContact && alert(`${isExistContact.name} is already in contacts!`);\r\n    return !isExistContact;\r\n  };\r\n\r\n  handleRemoveContact = (id) =>\r\n    this.setState(({ contacts }) => ({\r\n      contacts: contacts.filter((contact) => contact.id !== id),\r\n    }));\r\n\r\n  handleChangeFilter = (filter) => this.setState({ filter });\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n    return (\r\n      <>\r\n        <div className=\"Container\">\r\n          <section title=\"Phonebook\" className=\"Section\">\r\n            <h1>Phonebook</h1>\r\n            <ContactForm\r\n              contacts={contacts}\r\n              onAdd={this.handleAddContact}\r\n              onCheckUnique={this.handleCheckUniqueContact}\r\n            />\r\n          </section>\r\n          <section title=\"Contacts\" className=\"Section\">\r\n            <h2>Contacts</h2>\r\n            <Filter filter={filter} onChange={this.handleChangeFilter} />\r\n            <ContactList\r\n              contacts={visibleContacts}\r\n              onRemove={this.handleRemoveContact}\r\n            />\r\n          </section>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./base.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}